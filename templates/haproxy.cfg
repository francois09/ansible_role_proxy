# MANAGED VIA ANSIBLE DO NOT EDIT
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
{% for opt in proxy__options %}
	option      {{opt}}
{% endfor %}
{% for name  in proxy__timeouts.keys() %}
	timeout {{ name }} {{ proxy__timeouts[name] }}
{% endfor %}
{% for code  in proxy__errorfiles.keys() %}
	errorfile {{ code }} {{ proxy__errorfiles[code] }}
{% endfor %}

{% if proxy__config.stats %}
listen stats
	bind 127.0.0.1:{{ proxy__config.stats.port }}
	mode http
	stats enable
	stats hide-version
	stats uri /
	stats refresh 5s
	stats realm haproxy\ statistics
	stats auth {{ proxy__config.stats.user }}:{{ proxy__config.stats.password }}
{% endif %}

# BACKEND FOR TCP MODE
{% for s in proxy__tcp_services %}
{%   if s.group is defined and groups[s.group] is defined %}
listen tcp-{{ s.name}}-{{ s.port }}
{%     for server in groups[s.group] |sort %}
{%       if s.backend_address is defined %}
{%         set lip = s.backend_address %}
{%       else %}
{%         set lip = hostvars[server]['ansible_all_ipv4_addresses']|ipaddr(s.backend_network|default(proxy__server_network|default("")))|default([hostvars[server]['ansible_' + s.backend_interface|default(hostvars[server]['ansible_default_ipv4']['interface'])]['ipv4']['address']], true)|first %}
{%       endif %}
    server {{ hostvars[server]['ansible_hostname'] }} {{ lip }}:{{ s.backend_port|default(s.port) }} check inter 5s rise 2 fall 3
{%     endfor %}
    bind {% if s.frontend_address is defined %}{{ s.frontend_address }}{% else %}{{ proxy__default_frontend_address|default("") }}{% endif %}:{{ s.port }}
    mode tcp
    option tcplog
{%     if 'timeouts' in s %}
{%       for timeout in s.timeouts.keys() %}
    timeout {{ timeout }} {{ s.timeouts[timeout] }}
{%       endfor %}
{%     endif %}
{%     for option in s.get('options', []) %}
    {{ option }}
{%     endfor %}
{%   else %}
listen xtcp-{{ s.name }}-{{ s.port}}
    server {{ s.external_server}} {{ s.external_ip }}:{{ s.backend_port|default(s.port) }} check inter 5s rise 2 fall 3
    bind {% if s.frontend_address is defined %}{{ s.frontend_address }}{% else %}{{ proxy__default_frontend_address|default("") }}{% endif %}:{{ s.port }}
    mode tcp
    option tcplog
{%     if 'timeouts' in s %}
{%       for timeout in s.timeouts.keys() %}
    timeout {{ timeout }} {{ s.timeouts[timeout] }}
{%       endfor %}
{%     endif %}
{%     for option in s.get('options', []) %}
    {{ option }}
{%     endfor %}
{%   endif %}

{% endfor %}

# BACKEND FOR HTTP MODE
{% for s in proxy__http_services %}
{%   if groups[s.group] is defined %}
backend http-{{ s.name|default(s.group) }}
    mode http
{%     if s.http_check is defined %}
    option httpchk {{ s.http_check }}
{%     elif s.tcp_check is defined %}
    option tcp-check
{%     endif %}
    http-response del-header Server
{%     for option in s.get('options', []) %}
    {{ option }}
{%     endfor %}
{%   for option in s.get('backend_options', []) %}
    {{ option }}
{%   endfor %}
{%     for server in groups[s.group] |sort %}
{%       if s.backend_address is defined %}
{%         set lip = s.backend_address %}
{%       else %}
{%         set lip = hostvars[server]['ansible_all_ipv4_addresses']|ipaddr(s.backend_network|default(proxy__server_network|default("")))|default([hostvars[server]['ansible_' + s.backend_interface|default(hostvars[server]['ansible_default_ipv4']['interface'])]['ipv4']['address']], true)|first %}
{%       endif %}
    server {{ hostvars[server]['ansible_hostname'] }} {{ lip }}:{{ s.backend_port|default('80') }}{% if "https" == s.backend_protocol|default('http') %} ssl verify required ca-file {{ s.ca_file }}{% endif %} check inter 5s rise 2 fall 3
{%     endfor %}
{%   endif %}
{%   if 'timeouts' in s %}
{%     for timeout in s.timeouts.keys() %}
    timeout {{ timeout }} {{ s.timeouts[timeout] }}
{%     endfor %}
{%   endif %}

{% endfor %}
{% if proxy__http_services %}
frontend ft_http
    mode    http
    bind    :80

    option  httplog
{%   for s in proxy__http_services %}
{%   for option in s.get('frontend_options', []) %}
    {{ option }}
{%   endfor %}
{%   endfor %}

{%   for s in proxy__http_services %}
{%     if groups[s.group] is defined %}
{%       for host in s.http_hosts %}
    acl host_http-{{ s.name|default(s.group) }} hdr(host) -i {{ host }}
{%       endfor %}
{%     endif %}
{%   endfor %}

{%   for s in proxy__http_services %}
{%     if groups[s.group] is defined %}
    use_backend http-{{ s.name|default(s.group) }} if host_http-{{ s.name|default(s.group) }}
{%     endif %}
{%   endfor %}
{% endif %}

# BACKEND FOR HTTPS MODE
{% for s in proxy__https_services %}
{%   if groups[s.group] is defined %}
backend https-{{ s.name|default(s.group) }}
    mode tcp
{%     for server in groups[s.group] |sort %}
{%       set lip = hostvars[server]['ansible_all_ipv4_addresses']| ipaddr(s.listen_network|default(proxy__server_network|default("")))|default([hostvars[server]['ansible_' + s.listen_interface|default(hostvars[server]['ansible_default_ipv4']['interface'])]['ipv4']['address']], true)|first %}
    server {{ hostvars[server]['ansible_hostname'] }} {{ lip }}:{{ s.backend_port|default('443') }} check inter 5s rise 2 fall 3
{%     endfor %}
{%   endif %}
{%   if 'timeouts' in s %}
{%     for timeout in s.timeouts.keys() %}
    timeout {{ timeout }} {{ s.timeouts[timeout] }}
{%     endfor %}
{%   endif %}
{%   for option in s.get('options', []) %}
    {{ option }}
{%   endfor %}

{% endfor %}
{% if proxy__https_services %}
frontend ft_https
    mode    tcp
    bind    :443
    acl     tls req.ssl_hello_type 1
    tcp-request inspect-delay 5s
    tcp-request content accept if tls
    option  tcplog

{%   for s in proxy__https_services %}
{%     if groups[s.group] is defined %}
{%       for host in s.http_hosts %}
    acl host_https-{{ s.name|default(s.group) }} req.ssl_sni -i {{ host }}
{%       endfor %}
    use_backend https-{{ s.name|default(s.group) }} if host_https-{{ s.name|default(s.group) }}
{%     endif %}
{%   endfor %}
{% endif %}
